!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("geotiff")):"function"==typeof define&&define.amd?define(["exports","geotiff"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).parseGeoraster={},t.GeoTIFF)}(this,(function(t,e){"use strict";
/*! georaster v1.6.3 | (c) 2020 GeoTIFF contributors | MIT License | https://github.com/geotiff/georaster */
var r="function"==typeof Object.assign?Object.assign:function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},n=function(t){return new Promise((function(e,r){try{e(t())}catch(t){r(t)}}))},o=function(t,e){return new Promise((function(r,n){var o=new FileReader;o.onload=function(){r(o.result)},o.onerror=function(){n(o.error)},o.readAsArrayBuffer(t)})).then((function(t){return e(t)}))},a=function(t){return t.reduce((function(t,e){return t.concat(e)}),[])},i=function(t){return Promise.all(t.map((function(t){return t.readRasters({interleave:!0})}))).then(a)},u=function(t,e){return Promise.all(t.map((function(t){return t.readRasters({samples:e,interleave:!0})}))).then(a)},s=function(t){var e=t.getImageCount();return Promise.all(Array.from({length:e},(function(e,r){return t.getImage(r)})))},f=function(t,e){return n((function(){return e?new e(t):e=t instanceof ArrayBuffer||ArrayBuffer.isView(t)?e=URL.createObjectURL(new Blob([t])):t,e}))},c=function(t){return"string"==typeof t||t instanceof Blob||t instanceof ArrayBuffer||ArrayBuffer.isView(t)},l=function(t){return t.reduce((function(t,e){return t+e.width*e.height}),0)},d=function(t){return t.map((function(t){return t.getBoundingBox()}))},p=function(t){var e=t.getFileDirectory();return{geoKeys:e.GeoKeyDirectoryTag,values:t.getGDALMetadata(),noDataValue:e.GDAL_NODATA,projection:t.getGeoKeys().ProjectedCSTypeGeoKey,pcs:e.GeoKeyDirectoryTag&&e.GeoKeyDirectoryTag.ProjectedCSTypeGeoKey}};t["default"]=function(t){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},m=a.geotiff;return c(t)?f(t,m).then(e.fromUrl||e.fromArrayBuffer).then((function(t){return s(t).then((function(r){return Promise.all([t,r])}))})).then((function(t){var e=t[0],r=t[1];return i(r).then((function(t){return{data:t,geotiff:e,images:r,rasters:t,metadata:p(r[0]),pixelCount:l(r),bbox:d(r)}})})):Promise.reject("Unsupported georaster input type")},Object.defineProperty(t,"__esModule",{value:!0})}));
